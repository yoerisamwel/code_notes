{
  "src/ts/components/AttributionControl.tsx": {
    "displayName": "AttributionControl",
    "description": "The attribution control allows you to display attribution data in a small text box on a map. It is put on the map by default unless you set its attributionControl option to false, and it fetches attribution texts from layers with the getAttribution method automatically.",
    "props": {
      "prefix": {
        "description": "The HTML text shown before the attributions. Pass false to disable.",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            }
          ],
          "raw": "string | boolean"
        }
      },
      "position": {
        "description": "Map control position. [MUTABLE]",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/BaseLayer.tsx": {
    "displayName": "BaseLayer",
    "description": "BaseLayer is a wrapper of LayersControl.BaseLayer in react-leaflet. It takes similar properties to its react-leaflet counterpart.",
    "props": {
      "name": {
        "description": "Name of the layer, used for the label in the LayersControl.",
        "required": true,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "checked": {
        "description": "If true, the layer is shown, otherwise it's hidden. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Circle.tsx": {
    "displayName": "Circle",
    "description": "A class for drawing circle overlays on a map.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "radius": {
        "description": "Radius of the circle, in meters.",
        "required": true,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "stroke": {
        "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "color": {
        "description": "Stroke color.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "weight": {
        "description": "Stroke width in pixels.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "opacity": {
        "description": "Stroke opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "lineCap": {
        "description": "A string that defines shape to be used at the end of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'butt'",
              "computed": false
            },
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'square'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ],
          "raw": "LineCapShape"
        }
      },
      "lineJoin": {
        "description": "A string that defines shape to be used at the corners of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'miter'",
              "computed": false
            },
            {
              "value": "'bevel'",
              "computed": false
            }
          ],
          "raw": "LineJoinShape"
        }
      },
      "dashArray": {
        "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "dashOffset": {
        "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fill": {
        "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "fillColor": {
        "description": "Fill color. Defaults to the value of the color option.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fillOpacity": {
        "description": "Fill opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "fillRule": {
        "description": "A string that defines how the inside of a shape is determined.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'nonzero'",
              "computed": false
            },
            {
              "value": "'evenodd'",
              "computed": false
            }
          ],
          "raw": "FillRule"
        }
      },
      "className": {
        "description": "Custom class name set on an element. Only for SVG renderer.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "center": {
        "description": "A geographical point in (lat, lon) format. [MUTABLE]",
        "required": true,
        "type": {
          "name": "any",
          "raw": "LatLngExpression"
        }
      },
      "pathOptions": {
        "description": "Path options. Use this prop, if you want to modify path options through callbacks. [MUTABLE]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/CircleMarker.tsx": {
    "displayName": "CircleMarker",
    "description": "A circle of a fixed size with radius specified in pixels.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "radius": {
        "description": "Radius of the circle, in pixels.",
        "required": true,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "stroke": {
        "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "color": {
        "description": "Stroke color.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "weight": {
        "description": "Stroke width in pixels.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "opacity": {
        "description": "Stroke opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "lineCap": {
        "description": "A string that defines shape to be used at the end of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'butt'",
              "computed": false
            },
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'square'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ],
          "raw": "LineCapShape"
        }
      },
      "lineJoin": {
        "description": "A string that defines shape to be used at the corners of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'miter'",
              "computed": false
            },
            {
              "value": "'bevel'",
              "computed": false
            }
          ],
          "raw": "LineJoinShape"
        }
      },
      "dashArray": {
        "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "dashOffset": {
        "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fill": {
        "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "fillColor": {
        "description": "Fill color. Defaults to the value of the color option.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fillOpacity": {
        "description": "Fill opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "fillRule": {
        "description": "A string that defines how the inside of a shape is determined.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'nonzero'",
              "computed": false
            },
            {
              "value": "'evenodd'",
              "computed": false
            }
          ],
          "raw": "FillRule"
        }
      },
      "className": {
        "description": "Custom class name set on an element. Only for SVG renderer.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "center": {
        "description": "A geographical point in (lat, lon) format. [MUTABLE]",
        "required": true,
        "type": {
          "name": "any",
          "raw": "LatLngExpression"
        }
      },
      "pathOptions": {
        "description": "Path options. Use this prop, if you want to modify path options through callbacks. [MUTABLE]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Colorbar.tsx": {
    "displayName": "Colorbar",
    "description": "Color bar control component for Leaflet. Most of the functionality is\ndelegated to chroma-js (see the docs for that module). For creating your\nown color schemes for maps, have a look at http://colorbrewer2.org.",
    "props": {
      "position": {
        "description": "Map control position.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "opacity": {
        "description": "Opacity of the colorbar. Use it to match the perceived colors from an overlay\nwith opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "className": {
        "description": "Any CSS classes to appy.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "colorscale": {
        "description": "Chroma-js colorscale. Either a colorscale name, e.g. \"Viridis\", or a list of colors,\ne.g. [\"black\", \"#fdd49e\", \"rgba(255,0,0,0.35)\"].\nThe predefined colorscales are listed here:\nhttps://github.com/gka/chroma.js/blob/master/src/colors/colorbrewer.js",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string",
                "raw": "string"
              },
              "raw": "string[]"
            }
          ],
          "raw": "string | string[]"
        }
      },
      "width": {
        "description": "Width in pixels.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "height": {
        "description": "Height in pixels.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "min": {
        "description": "Domain minimum of the colorbar. Translates to the first color of the colorscale.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "max": {
        "description": "Domain maximum of the colorbar. Translates to the last color of the colorscale.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "classes": {
        "description": "The number or positions of discrete classes in the colorbar. If not set the\ncolorbar will be continuous, which is the default.",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number",
              "raw": "number"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          ],
          "raw": "number | number[]"
        }
      },
      "unit": {
        "description": "Optional text to append to the colorbar ticks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "nTicks": {
        "description": "Number of ticks on the colorbar.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "tickDecimals": {
        "description": "If set, fixes the tick decimal points to the given number.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "tickValues": {
        "description": "If set, these values are used for ticks (rather than the ones genrated based on nTicks).",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "tickText": {
        "description": "If set, this text will be used instead of the data values.",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "tooltip": {
        "description": "If true, the value will be shown as tooltip on hover.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "style": {
        "description": "HTML style object to add to the colorbar entity, e.g. to set font color.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/DivMarker.tsx": {
    "displayName": "DivMarker",
    "description": "Marker is used to display clickable/draggable icons on the map. Extends Layer.",
    "props": {
      "position": {
        "description": "A geographical point in (lat, lon) format. [MUTABLE]",
        "required": true,
        "type": {
          "name": "any",
          "raw": "LatLngExpression"
        }
      },
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "opacity": {
        "description": "The opacity of the marker. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "keyboard": {
        "description": "Whether the marker can be tabbed to with a keyboard and clicked by pressing enter.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "title": {
        "description": "Text for the browser tooltip that appear on marker hover (no tooltip\nby default).",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "alt": {
        "description": "Text for the alt attribute of the icon image. Useful for accessibility.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "zIndexOffset": {
        "description": "By default, marker images zIndex is set automatically based on its latitude. Use this option if you want to put the marker on top of all others (or below), specifying a high value like 1000 (or high negative value, respectively). [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "riseOnHover": {
        "description": "If true, the marker will get on top of others when you hover the mouse over it.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "riseOffset": {
        "description": "The z-index offset used for the riseOnHover feature.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "shadowPane": {
        "description": "Map pane where the markers shadow will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "autoPanOnFocus": {
        "description": "When true, the map will pan whenever the marker is focused (via e.g. pressing tab on the keyboard) to ensure the marker is visible within the map's bounds.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "draggable": {
        "description": "Whether the marker is draggable with mouse/touch or not. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "autoPan": {
        "description": "Whether to pan the map when dragging this marker near its edge or not.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "autoPanPadding": {
        "description": "Distance (in pixels to the left/right and to the top/bottom) of the map edge to start panning the map.",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "autoPanSpeed": {
        "description": "Number of pixels the map should pan by.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "iconOptions": {
        "description": "Options passed to DivIcon constructor.",
        "required": true,
        "type": {
          "name": "shape",
          "value": {
            "iconSize": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "iconAnchor": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "popupAnchor": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "className": {
              "description": "",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "html": {
              "description": "",
              "required": true,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "{ iconSize: number; iconAnchor: number; popupAnchor: number; className: string; html: string; }"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/EasyButton.tsx": {
    "displayName": "EasyButton",
    "description": "The easiest way to add buttons with Leaflet.",
    "props": {
      "position": {
        "description": "Map control position.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "title": {
        "description": "Title on the button.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "icon": {
        "description": "The icon to show, e.g. 'fa-globe' from \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/EditControl.tsx": {
    "displayName": "EditControl",
    "description": "EditControl.ts is based on https://github.com/alex3165/react-leaflet-draw/",
    "props": {
      "position": {
        "description": "Map control position.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "draw": {
        "description": "Enable/disable draw controls. See example of usage here https://github.com/Leaflet/Leaflet.draw#user-content-example-leafletdraw-config",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "edit": {
        "description": "Enable/disable edit controls. See example of usage here https://github.com/Leaflet/Leaflet.draw#user-content-example-leafletdraw-config",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "action": {
        "description": "Fires on every action.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "layer_type": {
              "description": "",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "type": {
              "description": "",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "n_actions": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "{ layer_type: string; type: string; n_actions: number; }"
        }
      },
      "drawToolbar": {
        "description": "Change this prop to manipulate the drawing toolbar, i.e. to change modes and/or invoke actions.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "mode": {
              "description": "",
              "required": true,
              "name": "enum",
              "value": [
                {
                  "value": "'marker'",
                  "computed": false
                },
                {
                  "value": "'polygon'",
                  "computed": false
                },
                {
                  "value": "'polyline'",
                  "computed": false
                },
                {
                  "value": "'rectangle'",
                  "computed": false
                },
                {
                  "value": "'circle'",
                  "computed": false
                },
                {
                  "value": "'circlemarker'",
                  "computed": false
                }
              ],
              "raw": "\"marker\" | \"polygon\" | \"polyline\" | \"rectangle\" | \"circle\" | \"circlemarker\""
            },
            "action": {
              "description": "",
              "required": true,
              "name": "enum",
              "value": [
                {
                  "value": "'cancel'",
                  "computed": false
                },
                {
                  "value": "'finish'",
                  "computed": false
                },
                {
                  "value": "'delete last point'",
                  "computed": false
                }
              ],
              "raw": "\"cancel\" | \"finish\" | \"delete last point\""
            },
            "n_clicks": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "{ mode: \"marker\" | \"polygon\" | \"polyline\" | \"rectangle\" | \"circle\" | \"circlemarker\"; action: \"cancel\" | \"finish\" | \"delete last point\"; n_clicks: number; }"
        }
      },
      "editToolbar": {
        "description": "Change this prop to manipulate the edit toolbar, i.e. to change modes and/or invoke actions.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "mode": {
              "description": "",
              "required": true,
              "name": "enum",
              "value": [
                {
                  "value": "'edit'",
                  "computed": false
                },
                {
                  "value": "'remove'",
                  "computed": false
                }
              ],
              "raw": "\"edit\" | \"remove\""
            },
            "action": {
              "description": "",
              "required": true,
              "name": "enum",
              "value": [
                {
                  "value": "'cancel'",
                  "computed": false
                },
                {
                  "value": "'save'",
                  "computed": false
                },
                {
                  "value": "'clear all'",
                  "computed": false
                }
              ],
              "raw": "\"cancel\" | \"save\" | \"clear all\""
            },
            "n_clicks": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "{ mode: \"edit\" | \"remove\"; action: \"cancel\" | \"save\" | \"clear all\"; n_clicks: number; }"
        }
      },
      "geojson": {
        "description": "Geojson representing the current features.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "features": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "object",
                "raw": "object"
              },
              "raw": "object[]"
            }
          },
          "raw": "{ features: object[]; }"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/FeatureGroup.tsx": {
    "displayName": "FeatureGroup",
    "description": "A class for drawing FeatureGroup overlays on a map.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/FullScreenControl.tsx": {
    "displayName": "FullScreenControl",
    "description": "A basic FullScreen control with two buttons (FullScreen in and FullScreen out). It is put on the map by default unless you set its FullScreenControl option to false.",
    "props": {
      "position": {
        "description": "Map control position.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "title": {
        "description": "Title of the button, default 'Full Screen'.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "content": {
        "description": "Content of the button, can be HTML, default 'null'.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "titleCancel": {
        "description": "Title of the button when fullscreen is on, default 'Exit Full Screen'.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "forceSeparateButton": {
        "description": "Force separate button to detach from zoom buttons, default 'false'.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "forcePseudoFullscreen": {
        "description": "Force use of pseudo full screen even if full screen API is available, default 'false'.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "fullscreenElement": {
        "description": "Dom element to render in full screen, false by default, fallback to 'map._container'.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "false | HTMLElement"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/GeoJSON.tsx": {
    "displayName": "GeoJSON",
    "description": "The GeoJSON component is based on the Leaflet counterpart, https://leafletjs.com/reference.html#geojson, but with\nextra functionality (e.g. marker clustering via supercluster https://github.com/mapbox/supercluster) added on top.\nMarker cluster styles are based on https://github.com/Leaflet/Leaflet.markercluster",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "style": {
        "description": "A Function defining the Path options for styling GeoJSON lines and polygons, called internally when data is added. The default value is to not override any defaults:\nfunction (geoJsonFeature) {\n    return {}\n}\n[MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "object",
              "raw": "object"
            }
          ],
          "raw": "DashFunction"
        }
      },
      "pointToLayer": {
        "description": "Function defining how GeoJSON points spawn Leaflet layers. It is internally called when data is added, passing the GeoJSON point feature and its LatLng. The default is to spawn a default Marker:\nfunction(geoJsonPoint, latlng) {\n    return L.marker(latlng);\n}\n[MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "object",
              "raw": "object"
            }
          ],
          "raw": "DashFunction"
        }
      },
      "onEachFeature": {
        "description": "A Function that will be called once for each created Feature, after it has been created and styled. Useful for attaching events and popups to features. The default is to do nothing with the newly created layers:\nfunction (feature, layer) {}\n[MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "object",
              "raw": "object"
            }
          ],
          "raw": "DashFunction"
        }
      },
      "filter": {
        "description": "A Function that will be used to decide whether to include a feature or not. The default is to include all features:\nfunction (geoJsonFeature) {\n    return true;\n}\n[MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "object",
              "raw": "object"
            }
          ],
          "raw": "DashFunction"
        }
      },
      "coordsToLatLng": {
        "description": "A Function that will be used for converting GeoJSON coordinates to LatLngs. The default is the coordsToLatLng static method. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "object",
              "raw": "object"
            }
          ],
          "raw": "DashFunction"
        }
      },
      "markersInheritOptions": {
        "description": "Whether default Markers for \"Point\" type Features inherit from group options. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "data": {
        "description": "Data (consider using url for better performance). One of data/url must be set. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "url": {
        "description": "Url to data (use instead of data for better performance). One of data/url must be set. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "zoomToBoundsOnClick": {
        "description": "If true, zoom to feature bounds on click. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "zoomToBounds": {
        "description": "If true, zoom bounds when data are set. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "hoverStyle": {
        "description": "Style function applied on hover. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "object",
              "raw": "object"
            }
          ],
          "raw": "DashFunction"
        }
      },
      "hideout": {
        "description": "Object intended for passing variables to functional properties, i.e. clusterToLayer, hoverStyle and\n(options) pointToLayer, style, filter, and onEachFeature functions. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "object",
              "raw": "object"
            }
          ],
          "raw": "string | object"
        }
      },
      "format": {
        "description": "Format of the data, applies both to url/data properties. Defaults to \"geojson\". [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'geojson'",
              "computed": false
            },
            {
              "value": "'geobuf'",
              "computed": false
            },
            {
              "value": "'flatgeobuf'",
              "computed": false
            }
          ],
          "raw": "\"geojson\" | \"geobuf\" | \"flatgeobuf\""
        }
      },
      "formatOptions": {
        "description": "Format options, currently only used for \"flatgeobuf\". [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "rect": {
              "description": "",
              "required": true,
              "name": "shape",
              "value": {
                "minX": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "minY": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "maxX": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "maxY": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                }
              },
              "raw": "{ minX: number; minY: number; maxX: number; maxY: number; }"
            }
          },
          "raw": "{ rect: { minX: number; minY: number; maxX: number; maxY: number; }; }"
        }
      },
      "cluster": {
        "description": "If true, marker clustering will be performed. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "clusterToLayer": {
        "description": "Function that determines how a cluster is drawn. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "object",
              "raw": "object"
            }
          ],
          "raw": "DashFunction"
        }
      },
      "spiderfyOnMaxZoom": {
        "description": "If true, markers that are not resolved at max zoom level will be spiderfied on click. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "superClusterOptions": {
        "description": "Options for the SuperCluster object (see https://github.com/mapbox/supercluster for details). [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "options": {
        "description": "Options for the GeoJSON object (see https://leafletjs.com/reference-1.6.0.html#geojson-option for details). [DEPRECATED]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/GestureHandling.tsx": {
    "displayName": "GestureHandling",
    "description": "GestureHandling is a light wrapper of https://github.com/elmarquis/Leaflet.GestureHandling",
    "props": {
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/ImageOverlay.tsx": {
    "displayName": "ImageOverlay",
    "description": "Used to load and display a single image over specific bounds of the map.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "opacity": {
        "description": "The overlay opacity. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "className": {
        "description": "A custom class name to assign to the image. Empty by default.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If true, the image overlay will emit mouse events when clicked or hovered.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "alt": {
        "description": "Text for the alt attribute of the image (useful for accessibility).",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "url": {
        "description": "The image URL. [MUTABLE]",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "crossOrigin": {
        "description": "Whether the crossOrigin attribute will be added to the image. If a String is provided, the image will have its crossOrigin attribute set to the String provided. This is needed if you want to access image pixel data. Refer to CORS Settings for valid String values.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "boolean | CrossOrigin"
        }
      },
      "errorOverlayUrl": {
        "description": "URL to the overlay image to show in place of the overlay that failed to load.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "zIndex": {
        "description": "The overlay zIndex. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "bounds": {
        "description": "The geographical bounds that the overlay is tied to. [MUTABLE]",
        "required": true,
        "type": {
          "name": "any",
          "raw": "LatLngBoundsExpression"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_loads": {
        "description": "An integer that represents the number of times that the load event has fired.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/LayerGroup.tsx": {
    "displayName": "LayerGroup",
    "description": "A class for drawing LayerGroup overlays on a map.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/LayersControl.tsx": {
    "displayName": "LayersControl",
    "description": "The layers control gives users the ability to switch between different base layers and switch overlays on/off.",
    "props": {
      "position": {
        "description": "Map control position. [MUTABLE]",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "collapsed": {
        "description": "If true, the control will be collapsed into an icon and expanded on mouse hover, touch, or keyboard activation. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "autoZIndex": {
        "description": "If true, the control will assign zIndexes in increasing order to all of its layers so that the order is preserved when switching them on/off.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "hideSingleBase": {
        "description": "If true, the base layers in the control will be hidden when there is only one.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "sortLayers": {
        "description": "Whether to sort the layers. When false, layers will keep the order in which they were added to the control.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "baseLayer": {
        "description": "Name of the currently selected base layer. [DL]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "overlays": {
        "description": "Names of the currently selected overlays. [DL]",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string",
            "raw": "string"
          },
          "raw": "string[]"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/LocateControl.tsx": {
    "displayName": "LocateControl",
    "description": "A useful control to geolocate the user with many options. Official Leaflet and MapBox plugin.",
    "props": {
      "position": {
        "description": "Map control position.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "icon": {
        "description": "The CSS class for the icon.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setView": {
        "description": "Set the map view (zoom and pan) to the user's location as it updates.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "false | \"once\" | \"always\" | \"untilPan\" | \"untilPanOrZoom\""
        }
      },
      "flyTo": {
        "description": "Smooth pan and zoom to the location of the marker. Only works in Leaflet 1.0+.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "keepCurrentZoomLevel": {
        "description": "Only pan when setting the view.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "initialZoomLevel": {
        "description": "After activating the plugin by clicking on the icon, zoom to the selected zoom level, even when keepCurrentZoomLevel is true. Set to false to disable this feature.",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number",
              "raw": "number"
            }
          ],
          "raw": "number | boolean"
        }
      },
      "clickBehavior": {
        "description": "What to do when the user clicks on the control. Has three options inView, inViewNotFollowing and outOfView. Possible values are stop and setView, or the name of a behaviour to inherit from.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "returnToPrevBounds": {
        "description": "If set, save the map bounds just before centering to the user's location. When control is disabled, set the view back to the bounds that were saved.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "cacheLocation": {
        "description": "Keep a cache of the location after the user deactivates the control. If set to false, the user has to wait until the locate API returns a new location before they see where they are again.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "showCompass": {
        "description": "Show the compass bearing on top of the location marker.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "drawCircle": {
        "description": "If set, a circle that shows the location accuracy is drawn.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "drawMarker": {
        "description": "If set, the marker at the users' location is drawn.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "circleStyle": {
        "description": "Accuracy circle style properties.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "markerStyle": {
        "description": "Inner marker style properties. Only works if your marker class supports setStyle.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "compassStyle": {
        "description": "Triangle compass heading marker style properties. Only works if your marker class supports setStyle.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "followCircleStyle": {
        "description": "Changes to the accuracy circle while following. Only need to provide changes.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "followMarkerStyle": {
        "description": "Changes to the inner marker while following. Only need to provide changes.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "followCompassStyle": {
        "description": "Changes to the compass marker while following. Only need to provide changes.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "iconLoading": {
        "description": "The CSS class for the icon while loading.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "iconElementTag": {
        "description": "The element to be created for icons.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "circlePadding": {
        "description": "Padding around the accuracy circle.",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "metric": {
        "description": "Use metric units.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "showPopup": {
        "description": "Display a pop-up when the user click on the inner marker.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "strings": {
        "description": "Strings used in the control. Options are title, text, metersUnit, feetUnit, popup and outsideMapBoundsMsg",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "title": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "metersUnit": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "feetUnit": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "popup": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "outsideMapBoundsMsg": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "StringsOptions"
        }
      },
      "locateOptions": {
        "description": "The default options passed to leaflets locate method.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "watch": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "setView": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "maxZoom": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "timeout": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "maximumAge": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "enableHighAccuracy": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            }
          },
          "raw": "LocateOptions"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/MapContainer.tsx": {
    "displayName": "MapContainer",
    "description": "The MapContainer component is responsible for creating the Leaflet Map instance and providing it to its child components, using a React Context.",
    "props": {
      "children": {
        "description": "Map components [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "className": {
        "description": "Extra CSS classes to add to the map.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "center": {
        "description": "Initial geographic center of the map.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "equals": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherLatLng: LatLngExpression, maxMargin?: number) => boolean"
            },
            "toString": {
              "description": "",
              "required": false,
              "name": "func",
              "raw": "() => string"
            },
            "distanceTo": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherLatLng: LatLngExpression) => number"
            },
            "wrap": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "toBounds": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(sizeInMeters: number) => LatLngBounds"
            },
            "clone": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "lat": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "lng": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "alt": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "LatLng"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "baselayerchange": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LayersControlEventHandlerFn"
            },
            "overlayadd": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LayersControlEventHandlerFn"
            },
            "overlayremove": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LayersControlEventHandlerFn"
            },
            "layeradd": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LayerEventHandlerFn"
            },
            "layerremove": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LayerEventHandlerFn"
            },
            "zoomlevelschange": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "unload": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "viewreset": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "load": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "zoomstart": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "movestart": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "zoom": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "move": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "zoomend": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "moveend": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "autopanstart": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "dragstart": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "drag": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "add": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "remove": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "loading": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "error": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "update": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "down": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "predrag": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletEventHandlerFn"
            },
            "resize": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "ResizeEventHandlerFn"
            },
            "popupopen": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "PopupEventHandlerFn"
            },
            "popupclose": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "PopupEventHandlerFn"
            },
            "tooltipopen": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "TooltipEventHandlerFn"
            },
            "tooltipclose": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "TooltipEventHandlerFn"
            },
            "locationerror": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "ErrorEventHandlerFn"
            },
            "locationfound": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LocationEventHandlerFn"
            },
            "click": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletMouseEventHandlerFn"
            },
            "dblclick": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletMouseEventHandlerFn"
            },
            "mousedown": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletMouseEventHandlerFn"
            },
            "mouseup": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletMouseEventHandlerFn"
            },
            "mouseover": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletMouseEventHandlerFn"
            },
            "mouseout": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletMouseEventHandlerFn"
            },
            "mousemove": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletMouseEventHandlerFn"
            },
            "contextmenu": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletMouseEventHandlerFn"
            },
            "preclick": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletMouseEventHandlerFn"
            },
            "keypress": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletKeyboardEventHandlerFn"
            },
            "keydown": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletKeyboardEventHandlerFn"
            },
            "keyup": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "LeafletKeyboardEventHandlerFn"
            },
            "zoomanim": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "ZoomAnimEventHandlerFn"
            },
            "dragend": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "DragEndEventHandlerFn"
            },
            "tileunload": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "TileEventHandlerFn"
            },
            "tileloadstart": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "TileEventHandlerFn"
            },
            "tileload": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "TileEventHandlerFn"
            },
            "tileabort": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "TileEventHandlerFn"
            },
            "tileerror": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {},
              "raw": "TileErrorEventHandlerFn"
            }
          },
          "raw": "LeafletEventHandlerFnMap"
        }
      },
      "style": {
        "description": "Inline map style.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "keyboard": {
        "description": "Makes the map focusable and allows users to navigate the map with keyboard arrows and +/- keys.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bounds": {
        "description": "Initial map bounds.",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "extend": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(latlngOrBounds: LatLngExpression | LatLngBoundsExpression) => LatLngBounds"
                },
                "pad": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(bufferRatio: number) => LatLngBounds"
                },
                "getCenter": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getSouthWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getNorthEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getNorthWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getSouthEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getSouth": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getNorth": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "contains": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBoundsOrLatLng: LatLngExpression | LatLngBoundsExpression) => boolean"
                },
                "intersects": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
                },
                "overlaps": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
                },
                "toBBoxString": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => string"
                },
                "equals": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression, maxMargin?: number) => boolean"
                },
                "isValid": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => boolean"
                }
              },
              "raw": "LatLngBounds"
            }
          ],
          "raw": "LatLngBoundsExpression"
        }
      },
      "preferCanvas": {
        "description": "Whether Paths should be rendered on a Canvas renderer. By default, all Paths are rendered in a SVG renderer.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attributionControl": {
        "description": "Whether a attribution control is added to the map by default.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "zoomControl": {
        "description": "Whether a zoom control is added to the map by default.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "closePopupOnClick": {
        "description": "Set it to false if you don't want popups to close when user clicks the map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "boxZoom": {
        "description": "Whether the map can be zoomed to a rectangular area specified by dragging the mouse while pressing the shift key.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "doubleClickZoom": {
        "description": "Whether the map can be zoomed in by double clicking on it and zoomed out by double clicking while holding shift. If passed 'center', double-click zoom will zoom to the center of the view regardless of where the mouse was.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "Zoom"
        }
      },
      "dragging": {
        "description": "Whether the map is draggable with mouse/touch or not.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "zoomSnap": {
        "description": "Forces the map's zoom level to always be a multiple of this, particularly right after a fitBounds() or a pinch-zoom. By default, the zoom level snaps to the nearest integer; lower values (e.g. 0.5 or 0.1) allow for greater granularity. A value of 0 means the zoom level will not be snapped after fitBounds or a pinch-zoom.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "zoomDelta": {
        "description": "Controls how much the map's zoom level will change after a zoomIn(), zoomOut(), pressing + or - on the keyboard, or using the zoom controls. Values smaller than 1 (e.g. 0.5) allow for greater granularity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "trackResize": {
        "description": "Whether the map automatically handles browser window resize to update itself.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "inertia": {
        "description": "If enabled, panning of the map will have an inertia effect where the map builds momentum while dragging and continues moving in the same direction for some time. Feels especially nice on touch devices. Enabled by default.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "inertiaDeceleration": {
        "description": "The rate with which the inertial movement slows down, in pixels/second\u00b2.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "inertiaMaxSpeed": {
        "description": "Max speed of the inertial movement, in pixels/second.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "easeLinearity": {
        "description": "Defaults to 0.2.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "worldCopyJump": {
        "description": "With this option enabled, the map tracks when you pan to another \"copy\" of the world and seamlessly jumps to the original one so that all overlays like markers and vector layers are still visible.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "maxBoundsViscosity": {
        "description": "If maxBounds is set, this option will control how solid the bounds are when dragging the map around. The default value of 0.0 allows the user to drag outside the bounds at normal speed, higher values will slow down map dragging outside bounds, and 1.0 makes the bounds fully solid, preventing the user from dragging outside the bounds.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "keyboardPanDelta": {
        "description": "Amount of pixels to pan when pressing an arrow key.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "scrollWheelZoom": {
        "description": "Whether the map can be zoomed by using the mouse wheel. If passed 'center', it will zoom to the center of the view regardless of where the mouse was.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "Zoom"
        }
      },
      "wheelDebounceTime": {
        "description": "Limits the rate at which a wheel can fire (in milliseconds). By default user can't zoom via wheel more often than once per 40 ms.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "wheelPxPerZoomLevel": {
        "description": "How many scroll pixels (as reported by L.DomEvent.getWheelDelta) mean a change of one full zoom level. Smaller values will make wheel-zooming faster (and vice versa).",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "tapHold": {
        "description": "Enables simulation of contextmenu event, default is true for mobile Safari.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "tapTolerance": {
        "description": "The max number of pixels a user can shift his finger during touch for it to be considered a valid tap.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "touchZoom": {
        "description": "Whether the map can be zoomed by touch-dragging with two fingers. If passed 'center', it will zoom to the center of the view regardless of where the touch events (fingers) were. Enabled for touch-capable web browsers.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "Zoom"
        }
      },
      "bounceAtZoomLimits": {
        "description": "Set it to false if you don't want the map to zoom beyond min/max zoom and then bounce back when pinch-zooming.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "zoom": {
        "description": "Initial map zoom level.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "minZoom": {
        "description": "Minimum zoom level of the map. If not specified and at least one GridLayer or TileLayer is in the map, the lowest of their minZoom options will be used instead.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "maxZoom": {
        "description": "Maximum zoom level of the map. If not specified and at least one GridLayer or TileLayer is in the map, the highest of their maxZoom options will be used instead.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "maxBounds": {
        "description": "When this option is set, the map restricts the view to the given geographical bounds, bouncing the user back if the user tries to pan outside the view. To set the restriction dynamically, use setMaxBounds method.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "extend": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(latlngOrBounds: LatLngExpression | LatLngBoundsExpression) => LatLngBounds"
            },
            "pad": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(bufferRatio: number) => LatLngBounds"
            },
            "getCenter": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getSouthWest": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getNorthEast": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getNorthWest": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getSouthEast": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getWest": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "getSouth": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "getEast": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "getNorth": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "contains": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBoundsOrLatLng: LatLngExpression | LatLngBoundsExpression) => boolean"
            },
            "intersects": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
            },
            "overlaps": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
            },
            "toBBoxString": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => string"
            },
            "equals": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBounds: LatLngBoundsExpression, maxMargin?: number) => boolean"
            },
            "isValid": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => boolean"
            }
          },
          "raw": "LatLngBounds"
        }
      },
      "zoomAnimation": {
        "description": "Whether the map zoom animation is enabled. By default it's enabled in all browsers that support CSS3 Transitions except Android.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "zoomAnimationThreshold": {
        "description": "Won't animate zoom if the zoom difference exceeds this value.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "fadeAnimation": {
        "description": "Whether the tile fade animation is enabled. By default it's enabled in all browsers that support CSS3 Transitions except Android.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "markerZoomAnimation": {
        "description": "Whether markers animate their zoom with the zoom animation, if disabled they will disappear for the length of the animation. By default it's enabled in all browsers that support CSS3 Transitions except Android.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "transform3DLimit": {
        "description": "Defines the maximum size of a CSS translation transform. The default value should not be changed unless a web browser positions layers in the wrong place after doing a large panBy.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "boundsOptions": {
        "description": "Options for initial map bounds.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "paddingTopLeft": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "paddingBottomRight": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "padding": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "maxZoom": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "animate": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "duration": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "easeLinearity": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "noMoveStart": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            }
          },
          "raw": "FitBoundsOptions"
        }
      },
      "placeholder": {
        "description": "Component to be shown instead of the map.",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "crs": {
        "description": "The Coordinate Reference System to use. Don't change this if you're not sure what it means. [DL]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "renderer": {
        "description": "The default method for drawing vector layers on the map. L.SVG or L.Canvas by default depending on browser support. [DL]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "method": {
              "description": "",
              "required": true,
              "name": "enum",
              "value": [
                {
                  "value": "'svg'",
                  "computed": false
                },
                {
                  "value": "'canvas'",
                  "computed": false
                }
              ],
              "raw": "\"svg\" | \"canvas\""
            },
            "options": {
              "description": "",
              "required": true,
              "name": "object",
              "raw": "object"
            }
          },
          "raw": "{ method: \"svg\" | \"canvas\"; options: object; }"
        }
      },
      "invalidateSize": {
        "description": "Change the value to force map size invalidation. [DL]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "number",
              "raw": "number"
            },
            {
              "name": "object",
              "raw": "object"
            }
          ],
          "raw": "string | number | object"
        }
      },
      "viewport": {
        "description": "This property can be used to manipulate the viewport after initializing the map. Set either \"center\"/\"zoom\",\nor bounds. If both are set, \"bounds\" takes precedence. Default value for transition is \"setView\" for \"center\"/\n\"zoom\", and \"fitBounds\" for \"bounds\". [DL]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "center": {
              "description": "",
              "required": false,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "zoom": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "transition": {
              "description": "",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'setView'",
                  "computed": false
                },
                {
                  "value": "'flyTo'",
                  "computed": false
                },
                {
                  "value": "'panTo'",
                  "computed": false
                },
                {
                  "value": "'fitBounds'",
                  "computed": false
                },
                {
                  "value": "'flyToBounds'",
                  "computed": false
                },
                {
                  "value": "'panInsideBounds'",
                  "computed": false
                }
              ],
              "raw": "\"setView\" | \"flyTo\" | \"panTo\" | \"fitBounds\" | \"flyToBounds\" | \"panInsideBounds\""
            },
            "bounds": {
              "description": "",
              "required": false,
              "name": "arrayOf",
              "value": {
                "name": "arrayOf",
                "value": {
                  "name": "number",
                  "raw": "number"
                },
                "raw": "number[]"
              },
              "raw": "number[][]"
            },
            "options": {
              "description": "",
              "required": false,
              "name": "shape",
              "value": {
                "animate": {
                  "description": "",
                  "required": false,
                  "name": "bool",
                  "raw": "boolean"
                },
                "duration": {
                  "description": "",
                  "required": false,
                  "name": "number",
                  "raw": "number"
                },
                "easeLinearity": {
                  "description": "",
                  "required": false,
                  "name": "number",
                  "raw": "number"
                },
                "noMoveStart": {
                  "description": "",
                  "required": false,
                  "name": "bool",
                  "raw": "boolean"
                },
                "paddingTopLeft": {
                  "description": "",
                  "required": false,
                  "name": "arrayOf",
                  "value": {
                    "name": "number",
                    "raw": "number"
                  },
                  "raw": "number[]"
                },
                "paddingBottomRight": {
                  "description": "",
                  "required": false,
                  "name": "arrayOf",
                  "value": {
                    "name": "number",
                    "raw": "number"
                  },
                  "raw": "number[]"
                },
                "padding": {
                  "description": "",
                  "required": false,
                  "name": "arrayOf",
                  "value": {
                    "name": "number",
                    "raw": "number"
                  },
                  "raw": "number[]"
                }
              },
              "raw": "{ animate?: boolean; duration?: number; easeLinearity?: number; noMoveStart?: boolean; paddingTopLeft?: number[]; paddingBottomRight?: number[]; padding?: number[]; }"
            }
          },
          "raw": "{ center?: number[]; zoom?: number; transition?: \"setView\" | \"flyTo\" | \"panTo\" | \"fitBounds\" | \"flyToBounds\" | \"panInsideBounds\"; bounds?: number[][]; options?: { animate?: boolean; duration?: number; ... 4 more ...; padding?: number[]; }; }"
        }
      },
      "trackViewport": {
        "description": "If true (default), zoom, center, and bounds properties are updated on whenReady/moveend. [DL]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_loads": {
        "description": "An integer that represents the number of times that the load event has fired.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "n_keydowns": {
        "description": "An integer that represents the number of times that the keyboard has been pressed.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "keydownData": {
        "description": "An object holding data related to the keydown event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "key": {
              "description": "",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "ctrlKey": {
              "description": "",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            },
            "metaKey": {
              "description": "",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            },
            "shiftKey": {
              "description": "",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            },
            "repeat": {
              "description": "",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            }
          },
          "raw": "{ key: string; ctrlKey: boolean; metaKey: boolean; shiftKey: boolean; repeat: boolean; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Marker.tsx": {
    "displayName": "Marker",
    "description": "Marker is used to display clickable/draggable icons on the map. Extends Layer.",
    "props": {
      "position": {
        "description": "A geographical point in (lat, lon) format. [MUTABLE]",
        "required": true,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "equals": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherLatLng: LatLngExpression, maxMargin?: number) => boolean"
                },
                "toString": {
                  "description": "",
                  "required": false,
                  "name": "func",
                  "raw": "() => string"
                },
                "distanceTo": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherLatLng: LatLngExpression) => number"
                },
                "wrap": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "toBounds": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(sizeInMeters: number) => LatLngBounds"
                },
                "clone": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "lat": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "lng": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "alt": {
                  "description": "",
                  "required": false,
                  "name": "number",
                  "raw": "number"
                }
              },
              "raw": "LatLng"
            }
          ],
          "raw": "LatLngExpression"
        }
      },
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "opacity": {
        "description": "The opacity of the marker. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "keyboard": {
        "description": "Whether the marker can be tabbed to with a keyboard and clicked by pressing enter.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "title": {
        "description": "Text for the browser tooltip that appear on marker hover (no tooltip\nby default).",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "alt": {
        "description": "Text for the alt attribute of the icon image. Useful for accessibility.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "zIndexOffset": {
        "description": "By default, marker images zIndex is set automatically based on its latitude. Use this option if you want to put the marker on top of all others (or below), specifying a high value like 1000 (or high negative value, respectively). [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "riseOnHover": {
        "description": "If true, the marker will get on top of others when you hover the mouse over it.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "riseOffset": {
        "description": "The z-index offset used for the riseOnHover feature.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "shadowPane": {
        "description": "Map pane where the markers shadow will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "autoPanOnFocus": {
        "description": "When true, the map will pan whenever the marker is focused (via e.g. pressing tab on the keyboard) to ensure the marker is visible within the map's bounds.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "draggable": {
        "description": "Whether the marker is draggable with mouse/touch or not. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "autoPan": {
        "description": "Whether to pan the map when dragging this marker near its edge or not.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "autoPanPadding": {
        "description": "Distance (in pixels to the left/right and to the top/bottom) of the map edge to start panning the map.",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "autoPanSpeed": {
        "description": "Number of pixels the map should pan by.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "icon": {
        "description": "Options passed to L.icon constructor. See https://leafletjs.com/reference.html#icon for details on how to customize the marker icon. [DL]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "iconUrl": {
              "description": "",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "crossOrigin": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "boolean | CrossOrigin"
            },
            "iconRetinaUrl": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "iconSize": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "iconAnchor": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "popupAnchor": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "tooltipAnchor": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "shadowUrl": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "shadowRetinaUrl": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "shadowSize": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "shadowAnchor": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "className": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "attribution": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "IconOptions"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/MeasureControl.tsx": {
    "displayName": "MeasureControl",
    "description": "Coordinate, linear, and area measure control for Leaflet maps.",
    "props": {
      "position": {
        "description": "Map control position.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "primaryLengthUnit": {
        "description": "The primary units used to display length results.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "secondaryLengthUnit": {
        "description": "The secondary units used to display length results.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "primaryAreaUnit": {
        "description": "The primary units used to display area results.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "secondaryAreaUnit": {
        "description": "The secondary units used to display area results.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "activeColor": {
        "description": "The color to use for map features rendered while actively performing a measurement.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "completedColor": {
        "description": "The color to use for features generated from a completed measurement.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "popupOptions": {
        "description": "The options applied to the popup of the resulting measure feature.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "maxWidth": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "minWidth": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "maxHeight": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "keepInView": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "closeButton": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "autoPan": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "autoPanPaddingTopLeft": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "autoPanPaddingBottomRight": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "autoPanPadding": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "autoClose": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "closeOnClick": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "closeOnEscapeKey": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "offset": {
              "description": "",
              "required": false,
              "name": "any",
              "raw": "PointExpression"
            },
            "className": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "content": {
              "description": "",
              "required": false,
              "name": "union",
              "value": [
                {
                  "name": "string",
                  "raw": "string"
                },
                {
                  "name": "func",
                  "raw": "(layer: Layer) => string"
                },
                {
                  "name": "func",
                  "raw": "(layer: Layer) => HTMLElement"
                }
              ],
              "raw": "string | HTMLElement | ((layer: Layer) => string) | ((layer: Layer) => HTMLElement)"
            }
          },
          "raw": "PopupOptions"
        }
      },
      "units": {
        "description": "Custom units to make available to the measurement calculator. Packaged units are feet, meters, miles, and kilometers for length and acres, hectares, sqfeet, sqmeters, and sqmiles for areas. Additional unit definitions can be added to the packaged units using this option.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "string": {
              "description": "",
              "required": true,
              "name": "shape",
              "value": {
                "factor": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "display": {
                  "description": "",
                  "required": true,
                  "name": "string",
                  "raw": "string"
                },
                "decimals": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                }
              },
              "raw": "{ factor: number; display: string; decimals: number; }"
            }
          },
          "raw": "{ string: { factor: number; display: string; decimals: number; }; }"
        }
      },
      "captureZIndex": {
        "description": "The Z-index of the marker used to capture measure clicks.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "decPoint": {
        "description": "The decimal point separator used when displaying measurements.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "thousandsSep": {
        "description": "The thousands separator used when displaying measurements.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Overlay.tsx": {
    "displayName": "Overlay",
    "description": "Overlay is a wrapper of LayersControl.Overlay in react-leaflet. It takes similar properties to its react-leaflet counterpart.",
    "props": {
      "name": {
        "description": "Name of the layer, used for the label in the LayersControl.",
        "required": true,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "checked": {
        "description": "If true, the layer is shown, otherwise it's hidden. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Pane.tsx": {
    "displayName": "Pane",
    "description": "Panes are DOM elements used to control the ordering of layers on the map.",
    "props": {
      "name": {
        "description": "The name must be unique to the pane and different from the default Leaflet pane names.",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "className": {
        "description": "CSS class(es).",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "style": {
        "description": "Component style, e.g. { zIndex: 500 } to specify the pane zIndex.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Polygon.tsx": {
    "displayName": "Polygon",
    "description": "A class for drawing polygon overlays on a map.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "stroke": {
        "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "color": {
        "description": "Stroke color.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "weight": {
        "description": "Stroke width in pixels.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "opacity": {
        "description": "Stroke opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "lineCap": {
        "description": "A string that defines shape to be used at the end of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'butt'",
              "computed": false
            },
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'square'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ],
          "raw": "LineCapShape"
        }
      },
      "lineJoin": {
        "description": "A string that defines shape to be used at the corners of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'miter'",
              "computed": false
            },
            {
              "value": "'bevel'",
              "computed": false
            }
          ],
          "raw": "LineJoinShape"
        }
      },
      "dashArray": {
        "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "dashOffset": {
        "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fill": {
        "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "fillColor": {
        "description": "Fill color. Defaults to the value of the color option.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fillOpacity": {
        "description": "Fill opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "fillRule": {
        "description": "A string that defines how the inside of a shape is determined.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'nonzero'",
              "computed": false
            },
            {
              "value": "'evenodd'",
              "computed": false
            }
          ],
          "raw": "FillRule"
        }
      },
      "className": {
        "description": "Custom class name set on an element. Only for SVG renderer.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pathOptions": {
        "description": "Path options. Use this prop, if you want to modify path options through callbacks. [MUTABLE]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "smoothFactor": {
        "description": "How much to simplify the shape on each zoom level. More means better performance and smoother look, and less means more accurate representation.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "noClip": {
        "description": "Disable clipping.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "positions": {
        "description": "Array of geographical points. Note that points you pass when creating a polygon shouldn't have an additional last point equal to the first one \u2014 it's better to filter out such points. You can also pass an array of arrays of latlngs, with the first array representing the outer shape and the other arrays representing holes in the outer shape. Additionally, you can pass a multi-dimensional array to represent a MultiPolygon shape.",
        "required": true,
        "type": {
          "name": "any",
          "raw": "LatLngExpression[] | LatLngExpression[][] | LatLngExpression[][][]"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Polyline.tsx": {
    "displayName": "Polyline",
    "description": "A class for drawing polyline overlays on a map.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "stroke": {
        "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "color": {
        "description": "Stroke color.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "weight": {
        "description": "Stroke width in pixels.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "opacity": {
        "description": "Stroke opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "lineCap": {
        "description": "A string that defines shape to be used at the end of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'butt'",
              "computed": false
            },
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'square'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ],
          "raw": "LineCapShape"
        }
      },
      "lineJoin": {
        "description": "A string that defines shape to be used at the corners of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'miter'",
              "computed": false
            },
            {
              "value": "'bevel'",
              "computed": false
            }
          ],
          "raw": "LineJoinShape"
        }
      },
      "dashArray": {
        "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "dashOffset": {
        "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fill": {
        "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "fillColor": {
        "description": "Fill color. Defaults to the value of the color option.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fillOpacity": {
        "description": "Fill opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "fillRule": {
        "description": "A string that defines how the inside of a shape is determined.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'nonzero'",
              "computed": false
            },
            {
              "value": "'evenodd'",
              "computed": false
            }
          ],
          "raw": "FillRule"
        }
      },
      "className": {
        "description": "Custom class name set on an element. Only for SVG renderer.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pathOptions": {
        "description": "Path options. Use this prop, if you want to modify path options through callbacks. [MUTABLE]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "smoothFactor": {
        "description": "How much to simplify the shape on each zoom level. More means better performance and smoother look, and less means more accurate representation.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "noClip": {
        "description": "Disable clipping.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "positions": {
        "description": "Array of geographical points. You can create a Polyline object with multiple separate lines (MultiPolyline) by passing an array of arrays of geographic points.",
        "required": true,
        "type": {
          "name": "any",
          "raw": "LatLngExpression[] | LatLngExpression[][]"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/PolylineDecorator.tsx": {
    "displayName": "PolylineDecorator",
    "description": "Polyline is a wrapper of Polyline in react-leaflet. It takes similar properties to its react-leaflet counterpart.",
    "props": {
      "children": {
        "description": "The children of this component. If positions are not specified, an attempt is made to read them from the\nchildren property. In this case, the children must be a single PolyLine or a single Polygon.",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "positions": {
        "description": "An array of geographical points (lat, lon)",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "arrayOf",
                "value": {
                  "name": "number",
                  "raw": "number"
                },
                "raw": "number[]"
              },
              "raw": "number[][]"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "arrayOf",
                "value": {
                  "name": "arrayOf",
                  "value": {
                    "name": "number",
                    "raw": "number"
                  },
                  "raw": "number[]"
                },
                "raw": "number[][]"
              },
              "raw": "number[][][]"
            }
          ],
          "raw": "number[][] | number[][][]"
        }
      },
      "patterns": {
        "description": "List of patterns to be added.",
        "required": true,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "offset": {
                "description": "",
                "required": true,
                "name": "string",
                "raw": "string"
              },
              "endOffset": {
                "description": "",
                "required": true,
                "name": "string",
                "raw": "string"
              },
              "repeat": {
                "description": "",
                "required": true,
                "name": "string",
                "raw": "string"
              },
              "dash": {
                "description": "",
                "required": true,
                "name": "shape",
                "value": {
                  "pixelSize": {
                    "description": "",
                    "required": true,
                    "name": "number",
                    "raw": "number"
                  },
                  "pathOptions": {
                    "description": "",
                    "required": true,
                    "name": "object",
                    "raw": "object"
                  }
                },
                "raw": "{ pixelSize: number; pathOptions: object; }"
              },
              "arrowHead": {
                "description": "",
                "required": true,
                "name": "shape",
                "value": {
                  "polygon": {
                    "description": "",
                    "required": true,
                    "name": "bool",
                    "raw": "boolean"
                  },
                  "pixelSize": {
                    "description": "",
                    "required": true,
                    "name": "number",
                    "raw": "number"
                  },
                  "headAngle": {
                    "description": "",
                    "required": true,
                    "name": "number",
                    "raw": "number"
                  },
                  "pathOptions": {
                    "description": "",
                    "required": true,
                    "name": "object",
                    "raw": "object"
                  }
                },
                "raw": "{ polygon: boolean; pixelSize: number; headAngle: number; pathOptions: object; }"
              },
              "marker": {
                "description": "",
                "required": true,
                "name": "shape",
                "value": {
                  "markerOptions": {
                    "description": "",
                    "required": true,
                    "name": "object",
                    "raw": "object"
                  },
                  "rotate": {
                    "description": "",
                    "required": true,
                    "name": "bool",
                    "raw": "boolean"
                  }
                },
                "raw": "{ markerOptions: object; rotate: boolean; }"
              }
            },
            "raw": "{ offset: string; endOffset: string; repeat: string; dash: { pixelSize: number; pathOptions: object; }; arrowHead: { polygon: boolean; pixelSize: number; headAngle: number; pathOptions: object; }; marker: { ...; }; }"
          },
          "raw": "{ offset: string; endOffset: string; repeat: string; dash: { pixelSize: number; pathOptions: object; }; arrowHead: { polygon: boolean; pixelSize: number; headAngle: number; pathOptions: object; }; marker: { ...; }; }[]"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Popup.tsx": {
    "displayName": "Popup",
    "description": "Used to open popups in certain places of the map.",
    "props": {
      "position": {
        "description": "A geographical point in (lat, lon) format. [MUTABLE]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "equals": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherLatLng: LatLngExpression, maxMargin?: number) => boolean"
                },
                "toString": {
                  "description": "",
                  "required": false,
                  "name": "func",
                  "raw": "() => string"
                },
                "distanceTo": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherLatLng: LatLngExpression) => number"
                },
                "wrap": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "toBounds": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(sizeInMeters: number) => LatLngBounds"
                },
                "clone": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "lat": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "lng": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "alt": {
                  "description": "",
                  "required": false,
                  "name": "number",
                  "raw": "number"
                }
              },
              "raw": "LatLng"
            }
          ],
          "raw": "LatLngExpression"
        }
      },
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "className": {
        "description": "A custom CSS class name to assign to the popup.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If true, the popup/tooltip will listen to the mouse events.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "autoPan": {
        "description": "Set it to false if you don't want the map to do panning animation to fit the opened popup.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "autoPanPadding": {
        "description": "Equivalent of setting both top left and bottom right autopan padding to the same value.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "clone": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "add": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "subtract": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "divideBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "multiplyBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "scaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "unscaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "round": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "floor": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "ceil": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "trunc": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "distanceTo": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => number"
            },
            "equals": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "contains": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "toString": {
              "description": "",
              "required": false,
              "name": "func",
              "raw": "() => string"
            },
            "x": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "y": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "Point"
        }
      },
      "content": {
        "description": "Sets the HTML content of the overlay while initializing. If a function is passed the source layer will be passed to the function. The function should return a String or HTMLElement to be used in the overlay.",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            }
          ],
          "raw": "string | HTMLElement"
        }
      },
      "offset": {
        "description": "The offset of the popup position.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "clone": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "add": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "subtract": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "divideBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "multiplyBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "scaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "unscaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "round": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "floor": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "ceil": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "trunc": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "distanceTo": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => number"
            },
            "equals": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "contains": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "toString": {
              "description": "",
              "required": false,
              "name": "func",
              "raw": "() => string"
            },
            "x": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "y": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "Point"
        }
      },
      "maxWidth": {
        "description": "Max width of the popup, in pixels.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "minWidth": {
        "description": "Min width of the popup, in pixels.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "maxHeight": {
        "description": "If set, creates a scrollable container of the given height inside a popup if its content exceeds it. The scrollable container can be styled using the leaflet-popup-scrolled CSS class selector.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "autoPanPaddingTopLeft": {
        "description": "The margin between the popup and the top left corner of the map view after autopanning was performed.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "clone": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "add": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "subtract": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "divideBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "multiplyBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "scaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "unscaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "round": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "floor": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "ceil": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "trunc": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "distanceTo": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => number"
            },
            "equals": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "contains": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "toString": {
              "description": "",
              "required": false,
              "name": "func",
              "raw": "() => string"
            },
            "x": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "y": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "Point"
        }
      },
      "autoPanPaddingBottomRight": {
        "description": "The margin between the popup and the bottom right corner of the map view after autopanning was performed.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "clone": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "add": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "subtract": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "divideBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "multiplyBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "scaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "unscaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "round": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "floor": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "ceil": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "trunc": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "distanceTo": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => number"
            },
            "equals": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "contains": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "toString": {
              "description": "",
              "required": false,
              "name": "func",
              "raw": "() => string"
            },
            "x": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "y": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "Point"
        }
      },
      "keepInView": {
        "description": "Set it to true if you want to prevent users from panning the popup off of the screen while it is open.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "closeButton": {
        "description": "Controls the presence of a close button in the popup.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "autoClose": {
        "description": "Set it to false if you want to override the default behavior of the popup closing when another popup is opened.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "closeOnEscapeKey": {
        "description": "Set it to false if you want to override the default behavior of the ESC key for closing of the popup.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "closeOnClick": {
        "description": "Set it if you want to override the default behavior of the popup closing when user clicks on the map. Defaults to the map's closePopupOnClick option.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Rectangle.tsx": {
    "displayName": "Rectangle",
    "description": "A class for drawing rectangle overlays on a map.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "stroke": {
        "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "color": {
        "description": "Stroke color.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "weight": {
        "description": "Stroke width in pixels.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "opacity": {
        "description": "Stroke opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "lineCap": {
        "description": "A string that defines shape to be used at the end of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'butt'",
              "computed": false
            },
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'square'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ],
          "raw": "LineCapShape"
        }
      },
      "lineJoin": {
        "description": "A string that defines shape to be used at the corners of the stroke.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'miter'",
              "computed": false
            },
            {
              "value": "'bevel'",
              "computed": false
            }
          ],
          "raw": "LineJoinShape"
        }
      },
      "dashArray": {
        "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "dashOffset": {
        "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fill": {
        "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "fillColor": {
        "description": "Fill color. Defaults to the value of the color option.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "fillOpacity": {
        "description": "Fill opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "fillRule": {
        "description": "A string that defines how the inside of a shape is determined.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'nonzero'",
              "computed": false
            },
            {
              "value": "'evenodd'",
              "computed": false
            }
          ],
          "raw": "FillRule"
        }
      },
      "className": {
        "description": "Custom class name set on an element. Only for SVG renderer.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pathOptions": {
        "description": "Path options. Use this prop, if you want to modify path options through callbacks. [MUTABLE]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "bounds": {
        "description": "Geographical bounds.",
        "required": true,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "extend": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(latlngOrBounds: LatLngExpression | LatLngBoundsExpression) => LatLngBounds"
                },
                "pad": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(bufferRatio: number) => LatLngBounds"
                },
                "getCenter": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getSouthWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getNorthEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getNorthWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getSouthEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getSouth": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getNorth": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "contains": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBoundsOrLatLng: LatLngExpression | LatLngBoundsExpression) => boolean"
                },
                "intersects": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
                },
                "overlaps": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
                },
                "toBBoxString": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => string"
                },
                "equals": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression, maxMargin?: number) => boolean"
                },
                "isValid": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => boolean"
                }
              },
              "raw": "LatLngBounds"
            }
          ],
          "raw": "LatLngBoundsExpression"
        }
      },
      "smoothFactor": {
        "description": "How much to simplify the shape on each zoom level. More means better performance and smoother look, and less means more accurate representation.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "noClip": {
        "description": "Disable clipping.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/SVGOverlay.tsx": {
    "displayName": "SVGOverlay",
    "description": "Used to load, display and provide DOM access to an SVG file over specific bounds of the map.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "opacity": {
        "description": "The overlay opacity. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "className": {
        "description": "A custom class name to assign to the image. Empty by default.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If true, the image overlay will emit mouse events when clicked or hovered.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pathOptions": {
        "description": "Path options. Use this prop, if you want to modify path options through callbacks. [MUTABLE]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "stroke": {
              "description": "Whether to draw stroke along the path. Set false to disable borders on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "color": {
              "description": "Stroke color.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "weight": {
              "description": "Stroke width in pixels.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "opacity": {
              "description": "Stroke opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "lineCap": {
              "description": "A string that defines shape to be used at the end of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "raw": "LineCapShape"
            },
            "lineJoin": {
              "description": "A string that defines shape to be used at the corners of the stroke.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'miter'",
                  "computed": false
                },
                {
                  "value": "'bevel'",
                  "computed": false
                }
              ],
              "raw": "LineJoinShape"
            },
            "dashArray": {
              "description": "A string that defines the stroke dash pattern. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "dashOffset": {
              "description": "A string that defines the distance into the dash pattern to start the dash. Doesn't work on Canvas-powered layers in some old browsers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fill": {
              "description": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "fillColor": {
              "description": "Fill color. Defaults to the value of the color option.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "fillOpacity": {
              "description": "Fill opacity.",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "fillRule": {
              "description": "A string that defines how the inside of a shape is determined.",
              "required": false,
              "name": "enum",
              "value": [
                {
                  "value": "'inherit'",
                  "computed": false
                },
                {
                  "value": "'nonzero'",
                  "computed": false
                },
                {
                  "value": "'evenodd'",
                  "computed": false
                }
              ],
              "raw": "FillRule"
            },
            "className": {
              "description": "Custom class name set on an element. Only for SVG renderer.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "interactive": {
              "description": "If false, the layer will not emit mouse events and will act as a part of the underlying map.",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "bubblingMouseEvents": {
              "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "attribution": {
              "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "pane": {
              "description": "Map pane where the layer will be added.",
              "required": false,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "PathProps"
        }
      },
      "alt": {
        "description": "Text for the alt attribute of the image (useful for accessibility).",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "crossOrigin": {
        "description": "Whether the crossOrigin attribute will be added to the image. If a String is provided, the image will have its crossOrigin attribute set to the String provided. This is needed if you want to access image pixel data. Refer to CORS Settings for valid String values.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "boolean | CrossOrigin"
        }
      },
      "errorOverlayUrl": {
        "description": "URL to the overlay image to show in place of the overlay that failed to load.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "zIndex": {
        "description": "The overlay zIndex. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "bounds": {
        "description": "The geographical bounds that the overlay is tied to. [MUTABLE]",
        "required": true,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "extend": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(latlngOrBounds: LatLngExpression | LatLngBoundsExpression) => LatLngBounds"
                },
                "pad": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(bufferRatio: number) => LatLngBounds"
                },
                "getCenter": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getSouthWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getNorthEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getNorthWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getSouthEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getSouth": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getNorth": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "contains": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBoundsOrLatLng: LatLngExpression | LatLngBoundsExpression) => boolean"
                },
                "intersects": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
                },
                "overlaps": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
                },
                "toBBoxString": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => string"
                },
                "equals": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression, maxMargin?: number) => boolean"
                },
                "isValid": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => boolean"
                }
              },
              "raw": "LatLngBounds"
            }
          ],
          "raw": "LatLngBoundsExpression"
        }
      },
      "attributes": {
        "description": "The attributes must be valid SVGSVGElement properties.",
        "required": true,
        "type": {
          "name": "objectOf",
          "value": {
            "name": "string",
            "raw": "string"
          },
          "raw": "Record<string, string>"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/ScaleControl.tsx": {
    "displayName": "ScaleControl",
    "description": "A simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems.",
    "props": {
      "position": {
        "description": "Map control position. [MUTABLE]",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "metric": {
        "description": "Whether to show the metric scale line (m/km).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "maxWidth": {
        "description": "Maximum width of the control in pixels. The width is set dynamically to show round values (e.g. 100, 200, 500).",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "imperial": {
        "description": "Whether to show the imperial scale line (mi/ft).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "updateWhenIdle": {
        "description": "If true, the control is updated on moveend, otherwise it's always up-to-date (updated on move).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/TileLayer.tsx": {
    "displayName": "TileLayer",
    "description": "Used to load and display tile layers on the map. Note that most tile servers require attribution.",
    "props": {
      "opacity": {
        "description": "The layer opacity. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "className": {
        "description": "A custom class name to assign to the tile layer. Empty by default.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "crossOrigin": {
        "description": "Whether the crossOrigin attribute will be added to the tiles. If a String is provided, all tiles will have their crossOrigin attribute set to the String provided. This is needed if you want to access tile pixel data. Refer to CORS Settings for valid String values.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "boolean | CrossOrigin"
        }
      },
      "zIndex": {
        "description": "The layer zIndex. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "bounds": {
        "description": "If set, tiles will only be loaded inside the set LatLngBounds.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "extend": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(latlngOrBounds: LatLngExpression | LatLngBoundsExpression) => LatLngBounds"
            },
            "pad": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(bufferRatio: number) => LatLngBounds"
            },
            "getCenter": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getSouthWest": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getNorthEast": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getNorthWest": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getSouthEast": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getWest": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "getSouth": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "getEast": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "getNorth": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "contains": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBoundsOrLatLng: LatLngExpression | LatLngBoundsExpression) => boolean"
            },
            "intersects": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
            },
            "overlaps": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
            },
            "toBBoxString": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => string"
            },
            "equals": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBounds: LatLngBoundsExpression, maxMargin?: number) => boolean"
            },
            "isValid": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => boolean"
            }
          },
          "raw": "LatLngBounds"
        }
      },
      "minZoom": {
        "description": "The minimum zoom level down to which this layer will be displayed (inclusive).",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "maxZoom": {
        "description": "The maximum zoom level up to which this layer will be displayed (inclusive).",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "updateWhenIdle": {
        "description": "Load new tiles only when panning ends. true by default on mobile browsers, in order to avoid too many requests and keep smooth navigation. false otherwise in order to display new tiles during panning, since it is easy to pan outside the keepBuffer option in desktop browsers.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "subdomains": {
        "description": "Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings.",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string",
                "raw": "string"
              },
              "raw": "string[]"
            }
          ],
          "raw": "string | string[]"
        }
      },
      "errorTileUrl": {
        "description": "URL to the tile image to show in place of the tile that failed to load.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "zoomOffset": {
        "description": "The zoom number used in tile URLs will be offset with this value.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "tms": {
        "description": "If true, inverses Y axis numbering for tiles (turn this on for TMS services).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "zoomReverse": {
        "description": "If set to true, the zoom number used in tile URLs will be reversed (maxZoom - zoom instead of zoom).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "detectRetina": {
        "description": "If true and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "referrerPolicy": {
        "description": "Whether the referrerPolicy attribute will be added to the tiles. If a String is provided, all tiles will have their referrerPolicy attribute set to the String provided. This may be needed if your map's rendering context has a strict default but your tile provider expects a valid referrer (e.g. to validate an API token). Refer to HTMLImageElement.referrerPolicy for valid String values.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "boolean | ReferrerPolicy"
        }
      },
      "tileSize": {
        "description": "Width and height of tiles in the grid. Use a number if width and height are equal, or L.point(width, height) otherwise.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "updateWhenZooming": {
        "description": "By default, a smooth zoom animation (during a touch zoom or a flyTo()) will update grid layers every integer zoom level. Setting this option to false will update the grid layer only when the smooth animation ends.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "updateInterval": {
        "description": "Tiles will not update more than once every updateInterval milliseconds when panning.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "maxNativeZoom": {
        "description": "Maximum zoom number the tile source has available. If it is specified, the tiles on all zoom levels higher than maxNativeZoom will be loaded from maxNativeZoom level and auto-scaled.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "minNativeZoom": {
        "description": "Minimum zoom number the tile source has available. If it is specified, the tiles on all zoom levels lower than minNativeZoom will be loaded from minNativeZoom level and auto-scaled.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "noWrap": {
        "description": "Whether the layer is wrapped around the antimeridian. If true, the GridLayer will only be displayed once at low zoom levels. Has no effect when the map CRS doesn't wrap around. Can be used in combination with bounds to prevent requesting tiles outside the CRS limits.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "keepBuffer": {
        "description": "When panning the map, keep this many rows and columns of tiles before unloading them.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "url": {
        "description": "The URL template in the form 'https://{s}.somedomain.com/blabla/{z}/{x}/{y}{r}.png'. [MUTABLE, DL]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_loads": {
        "description": "An integer that represents the number of times that the load event has fired.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Tooltip.tsx": {
    "displayName": "Tooltip",
    "description": "Used to display small texts on top of map layers.",
    "props": {
      "position": {
        "description": "A geographical point in (lat, lon) format. [MUTABLE]",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "equals": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherLatLng: LatLngExpression, maxMargin?: number) => boolean"
                },
                "toString": {
                  "description": "",
                  "required": false,
                  "name": "func",
                  "raw": "() => string"
                },
                "distanceTo": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherLatLng: LatLngExpression) => number"
                },
                "wrap": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "toBounds": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(sizeInMeters: number) => LatLngBounds"
                },
                "clone": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "lat": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "lng": {
                  "description": "",
                  "required": true,
                  "name": "number",
                  "raw": "number"
                },
                "alt": {
                  "description": "",
                  "required": false,
                  "name": "number",
                  "raw": "number"
                }
              },
              "raw": "LatLng"
            }
          ],
          "raw": "LatLngExpression"
        }
      },
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "opacity": {
        "description": "Tooltip container opacity.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "className": {
        "description": "A custom CSS class name to assign to the overlay.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If true, the popup/tooltip will listen to the mouse events.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "content": {
        "description": "Sets the HTML content of the overlay while initializing. If a function is passed the source layer will be passed to the function. The function should return a String or HTMLElement to be used in the overlay.",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            }
          ],
          "raw": "string | HTMLElement"
        }
      },
      "offset": {
        "description": "The offset of the popup position.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "clone": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "add": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "subtract": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => Point"
            },
            "divideBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "multiplyBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(num: number) => Point"
            },
            "scaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "unscaleBy": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(scale: PointExpression) => Point"
            },
            "round": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "floor": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "ceil": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "trunc": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => Point"
            },
            "distanceTo": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => number"
            },
            "equals": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "contains": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherPoint: PointExpression) => boolean"
            },
            "toString": {
              "description": "",
              "required": false,
              "name": "func",
              "raw": "() => string"
            },
            "x": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            },
            "y": {
              "description": "",
              "required": true,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "Point"
        }
      },
      "direction": {
        "description": "Direction where to open the tooltip. Possible values are: right, left, top, bottom, center, auto. auto will dynamically switch between right and left according to the tooltip position on the map.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            }
          ],
          "raw": "Direction"
        }
      },
      "permanent": {
        "description": "Whether to open the tooltip permanently or only on mouseover.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "sticky": {
        "description": "If true, the tooltip will follow the mouse instead of being fixed at the feature center.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/VideoOverlay.tsx": {
    "displayName": "VideoOverlay",
    "description": "Used to load and display a video player over specific bounds of the map. Uses the <video> HTML5 element.",
    "props": {
      "children": {
        "description": "Children [MUTABLE].",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "opacity": {
        "description": "The overlay opacity. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "className": {
        "description": "A custom class name to assign to the image. Empty by default.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "interactive": {
        "description": "If true, the image overlay will emit mouse events when clicked or hovered.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "bubblingMouseEvents": {
        "description": "When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "alt": {
        "description": "Text for the alt attribute of the image (useful for accessibility).",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "url": {
        "description": "The video URL. [MUTABLE]",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "crossOrigin": {
        "description": "Whether the crossOrigin attribute will be added to the image. If a String is provided, the image will have its crossOrigin attribute set to the String provided. This is needed if you want to access image pixel data. Refer to CORS Settings for valid String values.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "boolean | CrossOrigin"
        }
      },
      "errorOverlayUrl": {
        "description": "URL to the overlay image to show in place of the overlay that failed to load.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "zIndex": {
        "description": "The overlay zIndex. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "bounds": {
        "description": "The geographical bounds that the overlay is tied to. [MUTABLE]",
        "required": true,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "extend": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(latlngOrBounds: LatLngExpression | LatLngBoundsExpression) => LatLngBounds"
                },
                "pad": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(bufferRatio: number) => LatLngBounds"
                },
                "getCenter": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getSouthWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getNorthEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getNorthWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getSouthEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => LatLng"
                },
                "getWest": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getSouth": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getEast": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "getNorth": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => number"
                },
                "contains": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBoundsOrLatLng: LatLngExpression | LatLngBoundsExpression) => boolean"
                },
                "intersects": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
                },
                "overlaps": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
                },
                "toBBoxString": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => string"
                },
                "equals": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "(otherBounds: LatLngBoundsExpression, maxMargin?: number) => boolean"
                },
                "isValid": {
                  "description": "",
                  "required": true,
                  "name": "func",
                  "raw": "() => boolean"
                }
              },
              "raw": "LatLngBounds"
            }
          ],
          "raw": "LatLngBoundsExpression"
        }
      },
      "autoplay": {
        "description": "Whether the video starts playing automatically when loaded. On some browsers autoplay will only work with muted: true",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "loop": {
        "description": "Whether the video will loop back to the beginning when played.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "keepAspectRatio": {
        "description": "Whether the video will save aspect ratio after the projection.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "muted": {
        "description": "Whether the video starts on mute when loaded.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "playsInline": {
        "description": "Mobile browsers will play the video right where it is instead of open it up in fullscreen mode.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "play": {
        "description": "Set to true/false to start/stop video playback. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "clickData": {
        "description": "An object holding data related to the click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_dblclicks": {
        "description": "An integer that represents the number of times that this element has been double-clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "dblclickData": {
        "description": "An object holding data related to the double click event. Typing is indicative.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "latlng": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "layerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            },
            "containerPoint": {
              "description": "",
              "required": true,
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          },
          "raw": "{ latlng: number[]; layerPoint: number[]; containerPoint: number[]; }"
        }
      },
      "n_loads": {
        "description": "An integer that represents the number of times that the load event has fired.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/WMSTileLayer.tsx": {
    "displayName": "WMSTileLayer",
    "description": "Used to display WMS services as tile layers on the map.",
    "props": {
      "opacity": {
        "description": "The layer opacity. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "className": {
        "description": "A custom class name to assign to the tile layer. Empty by default.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "attribution": {
        "description": "String to be shown in the attribution control, e.g. \"\u00a9 OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "pane": {
        "description": "Map pane where the layer will be added.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "url": {
        "description": "The URL template.",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "format": {
        "description": "WMS image format (use 'image/png' for layers with transparency).",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "crossOrigin": {
        "description": "Whether the crossOrigin attribute will be added to the tiles. If a String is provided, all tiles will have their crossOrigin attribute set to the String provided. This is needed if you want to access tile pixel data. Refer to CORS Settings for valid String values.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "boolean | CrossOrigin"
        }
      },
      "zIndex": {
        "description": "The layer zIndex. [MUTABLE]",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "bounds": {
        "description": "If set, tiles will only be loaded inside the set LatLngBounds.",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "extend": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(latlngOrBounds: LatLngExpression | LatLngBoundsExpression) => LatLngBounds"
            },
            "pad": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(bufferRatio: number) => LatLngBounds"
            },
            "getCenter": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getSouthWest": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getNorthEast": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getNorthWest": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getSouthEast": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => LatLng"
            },
            "getWest": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "getSouth": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "getEast": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "getNorth": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => number"
            },
            "contains": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBoundsOrLatLng: LatLngExpression | LatLngBoundsExpression) => boolean"
            },
            "intersects": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
            },
            "overlaps": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBounds: LatLngBoundsExpression) => boolean"
            },
            "toBBoxString": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => string"
            },
            "equals": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "(otherBounds: LatLngBoundsExpression, maxMargin?: number) => boolean"
            },
            "isValid": {
              "description": "",
              "required": true,
              "name": "func",
              "raw": "() => boolean"
            }
          },
          "raw": "LatLngBounds"
        }
      },
      "minZoom": {
        "description": "The minimum zoom level down to which this layer will be displayed (inclusive).",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "maxZoom": {
        "description": "The maximum zoom level up to which this layer will be displayed (inclusive).",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "updateWhenIdle": {
        "description": "Load new tiles only when panning ends. true by default on mobile browsers, in order to avoid too many requests and keep smooth navigation. false otherwise in order to display new tiles during panning, since it is easy to pan outside the keepBuffer option in desktop browsers.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "subdomains": {
        "description": "Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings.",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string",
                "raw": "string"
              },
              "raw": "string[]"
            }
          ],
          "raw": "string | string[]"
        }
      },
      "errorTileUrl": {
        "description": "URL to the tile image to show in place of the tile that failed to load.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "zoomOffset": {
        "description": "The zoom number used in tile URLs will be offset with this value.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "tms": {
        "description": "If true, inverses Y axis numbering for tiles (turn this on for TMS services).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "zoomReverse": {
        "description": "If set to true, the zoom number used in tile URLs will be reversed (maxZoom - zoom instead of zoom).",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "detectRetina": {
        "description": "If true and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "referrerPolicy": {
        "description": "Whether the referrerPolicy attribute will be added to the tiles. If a String is provided, all tiles will have their referrerPolicy attribute set to the String provided. This may be needed if your map's rendering context has a strict default but your tile provider expects a valid referrer (e.g. to validate an API token). Refer to HTMLImageElement.referrerPolicy for valid String values.",
        "required": false,
        "type": {
          "name": "any",
          "raw": "boolean | ReferrerPolicy"
        }
      },
      "tileSize": {
        "description": "Width and height of tiles in the grid. Use a number if width and height are equal, or L.point(width, height) otherwise.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "updateWhenZooming": {
        "description": "By default, a smooth zoom animation (during a touch zoom or a flyTo()) will update grid layers every integer zoom level. Setting this option to false will update the grid layer only when the smooth animation ends.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "updateInterval": {
        "description": "Tiles will not update more than once every updateInterval milliseconds when panning.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "maxNativeZoom": {
        "description": "Maximum zoom number the tile source has available. If it is specified, the tiles on all zoom levels higher than maxNativeZoom will be loaded from maxNativeZoom level and auto-scaled.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "minNativeZoom": {
        "description": "Minimum zoom number the tile source has available. If it is specified, the tiles on all zoom levels lower than minNativeZoom will be loaded from minNativeZoom level and auto-scaled.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "noWrap": {
        "description": "Whether the layer is wrapped around the antimeridian. If true, the GridLayer will only be displayed once at low zoom levels. Has no effect when the map CRS doesn't wrap around. Can be used in combination with bounds to prevent requesting tiles outside the CRS limits.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "keepBuffer": {
        "description": "When panning the map, keep this many rows and columns of tiles before unloading them.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "layers": {
        "description": "Comma-separated list of WMS layers to show.",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "styles": {
        "description": "Comma-separated list of WMS styles.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "transparent": {
        "description": "If true, the WMS service will return images with transparency.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "version": {
        "description": "Version of the WMS service to use.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "uppercase": {
        "description": "If true, WMS request parameter keys will be uppercase.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "params": {
        "description": "WMS parameters. [MUTABLE]",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "format": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "layers": {
              "description": "",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "request": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "service": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "styles": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "version": {
              "description": "",
              "required": false,
              "name": "string",
              "raw": "string"
            },
            "transparent": {
              "description": "",
              "required": false,
              "name": "bool",
              "raw": "boolean"
            },
            "width": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            },
            "height": {
              "description": "",
              "required": false,
              "name": "number",
              "raw": "number"
            }
          },
          "raw": "WMSParams"
        }
      },
      "crs": {
        "description": "The Coordinate Reference System to use. Don't change this if you're not sure what it means. [DL]",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "eventHandlers": {
        "description": "Object with keys specifying the event type and the value the corresponding event handlers. [MUTABLE]",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "disableDefaultEventHandlers": {
        "description": "If set to true, default events handlers are not registered. [MUTABLE]",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_loads": {
        "description": "An integer that represents the number of times that the load event has fired.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/ZoomControl.tsx": {
    "displayName": "ZoomControl",
    "description": "A basic zoom control with two buttons (zoom in and zoom out). It is put on the map by default unless you set its zoomControl option to false.",
    "props": {
      "position": {
        "description": "Map control position. [MUTABLE]",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'topleft'",
              "computed": false
            },
            {
              "value": "'topright'",
              "computed": false
            },
            {
              "value": "'bottomleft'",
              "computed": false
            },
            {
              "value": "'bottomright'",
              "computed": false
            }
          ],
          "raw": "ControlPosition"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Function handle that enables triggering Dash callbacks on prop update.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "loading_state": {
        "description": "Dash loading state information.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      }
    },
    "isContext": false
  }
}